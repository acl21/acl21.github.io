<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://akshaychandra.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://akshaychandra.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-06T13:10:37+00:00</updated><id>https://akshaychandra.com/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[3/3] Quaternion Rotation Operator</title><link href="https://akshaychandra.com/blog/2023/quat-rot-op2/" rel="alternate" type="text/html" title="[3/3] Quaternion Rotation Operator"/><published>2023-10-27T00:00:00+00:00</published><updated>2023-10-27T00:00:00+00:00</updated><id>https://akshaychandra.com/blog/2023/quat-rot-op2</id><content type="html" xml:base="https://akshaychandra.com/blog/2023/quat-rot-op2/"><![CDATA[<blockquote> <p><strong>Citation Note:</strong> I have borrowed this article’s content from Jack B. Kuipers’ seminal 1999 book <d-cite key="kuipers1999quaternions"></d-cite> on quaternions.</p> </blockquote> <blockquote> <p>As an admirer of the book’s writing style, I submit that you are probably better off referring to Chapter 5 of the book. My motivation to write this regardless is twofold - to provide robotics practitioners with a one-stop-shop entry point to quaternions and challenge/improve my understanding of them. I claim no expertise in this topic but found it so fascinating that I decided to write about it.</p> </blockquote> <blockquote> <p><strong>Prerequisites:</strong> This is [3/3] article in my series on quaternions. For this article, I assume readers’ familiarity with basic quaternion algebra <d-cite key="quat-basics"></d-cite> and some quaternion variants I discussed in <d-cite key="quat-rot-op1"></d-cite>.</p> </blockquote> <hr/> <p>Earlier, we saw a great deal of evidence that quaternions indeed can represent \(\mathbb{R}^3\) rotations. With the checked list in mind, we can now safely define the quaternion rotation operator and apply some tests to understand its geometric effects on \(\mathbb{R}^3\) vectors. All quaternions you see in this article are to be assumed units.</p> <h2 id="quaternion-rotation-operator-definition">Quaternion Rotation Operator: Definition</h2> <p>Let \(\mathbf{q}\) be a unit quaternion, and \(\vec{v}\) be a vector in \(\mathbb{R}^3\) (pure quaternion); we define two rotation operators as follows:</p> \[\begin{aligned} R_{\mathbf{q}}(\vec{v}) &amp;= \mathbf{q} \star \vec{v} \star \mathbf{q}^{\ast} \\ R_{\mathbf{q}^{\ast}}(\vec{v}) &amp;= \mathbf{q}^{\ast} \star \vec{v} \star \mathbf{q} \end{aligned}\] <p>For comparison, writing out the operator algorithm will be helpful.</p> \[\begin{aligned} R_{\mathbf{q}}(\vec{v}) &amp;= \mathbf{q} \star \vec{v} \star \mathbf{q}^{\ast} \\ &amp;= (2q_0^2-1)\vec{v} + 2(\vec{q}\cdot \vec{v})\vec{q} + 2q_0(\vec{q} \times \vec{v}) \\ R_{\mathbf{q}^{\ast}}(\vec{v}) &amp;= \mathbf{q}^{\ast} \star \vec{v} \star \mathbf{q} \\ &amp;= (q_0^2-\Vert \vec{q} \Vert^2)\vec{v} + 2(\vec{q}\cdot \vec{v})\vec{q} + 2q_0(\vec{q} \times \vec{v}) \end{aligned}\] <p>Without formal proof, I claim that these operators indeed rotate \(\vec{v}\) in \(\mathbb{R}^3\). Through some carefully designed tests, I hope to convince you on the same by answering the following key questions about \(R_{\mathbf{q}}\):</p> <ul> <li>What is the direction of rotation?</li> <li>What is the axis of rotation?</li> <li>What is the angle of rotation?</li> <li>What is the difference between \(R_{\mathbf{q}}\) and \(R_{\mathbf{q}^{\ast}}\)?</li> </ul> <p>Let us start by reverse engineering the output of \(R_{\mathbf{q}}(\mathbf{v})\) to answer the questions.</p> <h2 id="incremental-test">Incremental Test</h2> <p>For this test, let us make our lives easy and work with <em>simple</em> quaternions and <em>simple</em> vectors that are easy to visualise in our heads. Suppose that the unit quaternion \(\mathbf{q}\) in \(R_{\mathbf{q}}(\vec{v})\) has a basis vector</p> \[\vec{u} = 0i + 0j + 1k = k \quad (\text{or }\left[\begin{matrix} 0 \\ 0 \\ 1\end{matrix}\right])\] <p>where \(\{i, j, k\}\) are the standard basis vectors in \(\mathbb{R}^3\), that define the coordinate frame. Let us now look at \(\mathbf{q}\) in polar form (recall section <em>Polar Form</em> from <d-cite key="quat-rot-op1"></d-cite>):</p> \[\mathbf{q} = \cos \theta + k \sin \theta\] <p>Assume that the associated angle \(\theta\) is a very small positive angle. This assumption is helpful when comparing the input vector with the operator’s output vector. We want to verify if \(R_{\mathbf{q}}(\vec{v})\) merely “tweaks” the input vector when the associated angle is a very small positive value. Conveniently, for very small positive angles, we can round things up nicely, i.e., \(\cos \theta \approx 1\) and \(\sin \theta \approx \theta\) so the quaternion \(\mathbf{q}\) may be re-written as</p> \[\mathbf{q} \approx 1 + k\theta\] <p>In the spirit of simplicity, suppose that you want to rotate another basis vector \(\vec{v} = 1i + 0j + 0k = i\) (or \(\left[\begin{matrix} 1 \\ 0 \\ 0\end{matrix}\right]\)). Let us see what the operator \(R_{\mathbf{q}}(\vec{v})\) outputs for this carefully chosen \(\mathbf{q}\) and \(\vec{v}\):</p> \[\begin{aligned} \vec{w} &amp;= R_{\mathbf{q}}(\vec{v}) = \mathbf{q} \star i \star \mathbf{q}^{\ast} \\ &amp;= (1+k\theta)(i)(1-k\theta) \\ &amp;= (1+k\theta)(i+j\theta) \\ \vec{w} &amp;= i + 2\theta j \quad (\text{or }\left[\begin{matrix} 1 \\ 2\theta \\ 0\end{matrix}\right]) \end{aligned}\] <p>We can interpret this result to mean that the input vector \(i\) has been “tweaked” by <em>some</em> angle to produce the output vector \(i + 2\theta j\). Firstly, for completeness, let us examine the length of \(\vec{w}\)</p> \[\Vert \vec{w} \Vert = \sqrt{(1)^2 + (2\theta)^2} \approx 1 \quad (\text{Since }\theta \approx 0)\] <p>The length of the \(\vec{w}\) is still \(1\) (well almost, if you ignore the very small value \(\theta^2\))<d-footnote>Note that we have no restriction on the length of the vector to be rotated, just that the output vector's length _should not_ change after rotation and it does not so this is good news. </d-footnote>. Now, lets think about the angle between <em>rotated image</em> \(\vec{w}\) and \(\vec{v}\). It helps to mentally visualize this rotation as a vector that was earlier pointing at \(i\) (or \(\left[\begin{matrix} 1 \\ 0 \\ 0\end{matrix}\right]\)) and is now pointing at \(i+2\theta j\) (or \(\left[\begin{matrix} 1 \\ 2\theta \\ 0\end{matrix}\right]\)). Geometrically, it so appears that \(i\) is rotated <em>counter-clockwise</em> about the axis \(k\) by \(2\theta\) angle. Let us verify this by checking the angle of rotation \(\alpha\) between \(\vec{w}\) and \(\vec{v}\), which can be given by:</p> \[\begin{aligned} \tan \alpha &amp;= \frac{\Vert w \times v \Vert}{(w \cdot v)} \\ &amp;= \frac{\Vert i + 2\theta j \times i \Vert}{(i+2\theta j) \cdot (i)} \\ &amp;= \frac{\Vert 2\theta k \Vert}{(1 \cdot 1 + 2\theta \cdot 0 + 0 \cdot 0)}\\ &amp;= \frac{2\theta}{1} \quad (\text{Geometrically, just } \frac{\text{opposite}}{\text{adjacent}})\\ \alpha &amp;\approx 2\theta \quad (\text{Since } \tan \alpha \approx \alpha \text{ when } \alpha \approx 0^+) \\ \alpha &amp;\approx\text{A very small positive angle} \end{aligned}\] <p>which seems fair for the choice of a very small positive angle \(\theta\). Despite some (potentially uneasy) approximations, we now have a pretty good idea of the direction, axis and angle of rotation associated with \(R_{\mathbf{q}}\). The general rule goes as follows:</p> <blockquote> <p>Given a unit quaternion \(\mathbf{q} = \cos \theta + \vec{u} \sin \theta\) and a vector \(\vec{v}\) in \(\mathbb{R}^3\), \(R_{\mathbf{q}}(\vec{v})\) rotates \(\vec{v}\) in counter-clockwise direction about the axis of \(\vec{u}\) by angle \(2\theta\).</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/quat-rot-viz.png" sizes="95vw"/> <img src="/assets/img/blog/quat-rot-viz.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>See the figure above for clarity. We can further verify this visually (at least the axis and direction of rotation) for varying \(\theta\) values in Ben Eater’s interactive quaternion visualisation<d-cite key="eater-quat-viz"></d-cite>, see the following animation.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/quat-rot-viz-gif.gif" sizes="95vw"/> <img src="/assets/img/blog/quat-rot-viz-gif.gif" class="rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">The visualisation shows rotation from the above example but with varying associated angle.</figcaption> </figure> <p>I encourage you to verify other rotations, say when \(\vec{u} = i\) or \(j\). If you did verify, for the case \(\vec{u} = i\), you will have seen no rotation at all. This implies, perhaps obviously, that any vector \(\vec{v}\) which lies <em>on the axis of rotation</em> \(\vec{u}\) must be <em>invariant</em> under \(R_{\mathbf{q}}(\vec{v})\).</p> <h2 id="angle-test">Angle Test</h2> <p>When I first saw the incremental test, I was left uneasy and sceptical of the angle of rotation due to the approximations made. But we can be sure of the claims made on the angle of rotation with a simple angle test. Let us choose a unit quaternion with the associated angle \(\theta=\frac{\pi}{6}\) while keeping the axis of rotation \(\vec{u}\) as the same basis vector \(k\). Then we have the following quaternion</p> \[\begin{aligned} \mathbf{q} = \cos \theta + k \sin \theta &amp;= \cos (\frac{\pi}{6}) + k \sin (\frac{\pi}{6}) \\ &amp;= \frac{\sqrt{3}}{2} + \frac{1}{2} k \end{aligned}\] <p>Let us apply the operator \(R_{\mathbf{q}}(\vec{v})\) on the same basis vector \(\vec{v} = 1i + 0j + 0k = i\). We have</p> \[\begin{aligned} \vec{w} &amp;= R_{\mathbf{q}}(\vec{v}) = (\frac{\sqrt{3}}{2} + \frac{1}{2} k)(i)(\frac{\sqrt{3}}{2} - \frac{1}{2} k) \\ &amp;= (\frac{\sqrt{3}}{2} i + \frac{1}{2} j)(\frac{\sqrt{3}}{2} - \frac{1}{2} k) \\ &amp;= \frac{3}{4} i + \frac{\sqrt{3}}{4} j + \frac{\sqrt{3}}{4} j - \frac{1}{4} i \\ &amp;= \frac{1}{2} i + \frac{\sqrt{3}}{2} j \end{aligned}\] <p>As seen earlier, the angle between \(\frac{1}{2} i + \frac{\sqrt{3}}{2} j\) and \(i\) is given by</p> \[\begin{aligned} \tan \alpha &amp;= \frac{\frac{\sqrt{3}}{2}}{\frac{1}{2}} \quad (\frac{\text{opposite}}{\text{adjacent}}) \\ &amp;= \sqrt{3} \\ \alpha &amp;= \arctan \sqrt{3} \\ \alpha &amp;= \frac{\pi}{3} \quad (= 2\theta) \end{aligned}\] <p>We can now confirm that the angle of rotation for a unit quaternion \(\mathbf{q}\) with an associated angle \(\theta\) is indeed \(2\theta\). Always choose a quaternion that has an associate angle half that of your target rotation angle.</p> <h2 id="rotation-perspective">Rotation Perspective</h2> <p>At this point, we have everything we need to geometrically compare \(R_{\mathbf{q}}(\vec{v})\) and \(R_{\mathbf{q}^{\ast}}(\vec{v})\). Consider the example from the <em>Angle Test</em>, there are two possible interpretations of \(\vec{w}\). One is that \(\vec{v}\) has rotated about \(k\)-axis by \(+\frac{\pi}{3}\) angle that is in a counter-clockwise direction with a fixed coordinate frame \(\{i, j, k\}\), this is called <em>point</em> rotation. Another one is that the coordinate frame \(\{i, j, k\}\) has rotated about \(k\)-axis by \(-\frac{\pi}{3}\) angle that is in clockwise direction with a fixed vector \(\vec{v}\), this is called <em>frame</em> rotation. Which of these two perspectives is to be preferred in a given application is usually a subjective matter - a decision made by the practitioner. This is precisely where the conjugate rotation operator \(R_{\mathbf{q}^{\ast}}(\vec{v})\) comes into play.</p> <p>One can easily verify for the example in the <em>Incremental Test</em>, where \(\mathbf{q} \approx 1 + k\theta\) and \(\vec{v} = 1i + 0j + 0k = i\), applying the conjugate rotation operator \(R_{\mathbf{q}^{\ast}}(\vec{v})\) on \(\vec{v}\) would yield the following:</p> \[\vec{w}^{\ast} = R_{\mathbf{q}^{\ast}}(\vec{v}) = 1 - 2\theta j\] <p>Comparing this with the \(\vec{w} = 1 + 2\theta j\) suggests that the difference between \(R_{\mathbf{q}}(\vec{v})\) and \(R_{\mathbf{q}^{\ast}}(\vec{v})\) is simply the direction of rotation. One must be careful here, however, as seen in section <em>Polar Form</em> of <d-cite key="quat-rot-op1"></d-cite>, \(\theta\) has to restrict to the domain \((-\pi, \pi]\). So \(\theta\) can be both negative and positive, which makes it very difficult to differentiate between these two operators. Basically, \(R_{\mathbf{q}}(\vec{v})\) can do what \(R_{\mathbf{q}^{\ast}}(\vec{v})\) does with an appropriate choice of \(\theta\) i.e., replace \(\theta\) by \(-\theta\) in \(\mathbf{q}\) and you go from \(R_{\mathbf{q}}(\vec{v})\) to \(R_{\mathbf{q}^{\ast}}(\vec{v})\). In a nutshell, rotation perspective, personal preference, and even library conventions often decide the use of one operator over the other in a given application. It is important to note that both are mathematically equivalent and can represent the same rotations.</p> <h2 id="quaternion-rotation-operator-theorems">Quaternion Rotation Operator: Theorems</h2> <p>I present to you, without formal proof, the two theorems that summarise the two quaternion rotation operators \(R_{\mathbf{q}}(\vec{v})\) and \(R_{\mathbf{q}^{\ast}}(\vec{v})\).</p> <blockquote> <p><strong>Theorem 1:</strong> For any unit quaternion \(\mathbf{q} = q_0 + \vec{q} = \cos \theta + \vec{u} \sin \theta\) and for any vector \(\vec{v} \in \mathbb{R}^3\), the action of the operator \(R_{\mathbf{q}}(\vec{v}) = \mathbf{q} \star \vec{v} \star \mathbf{q}^{\ast}\) on \(\vec{v}\) may be interpreted geometrically as a rotation of the vector \(\vec{v}\) through an angle \(2\theta\) about \(\vec{q}\) or \(\vec{u}\) as the axis of rotation.</p> </blockquote> <blockquote> <p><strong>Theorem 2:</strong> For any unit quaternion \(\mathbf{q} = q_0 + \vec{q} = \cos \theta + \vec{u} \sin \theta\) and for any vector \(\vec{v} \in \mathbb{R}^3\), the action of the operator \(R_{\mathbf{q}^{\ast}}(\vec{v}) = \mathbf{q}^{\ast} \star \vec{v} \star \mathbf{q}\) on \(\vec{v}\) may be interpreted geometrically</p> </blockquote> <blockquote> <ul> <li>as a rotation of the coordinate frame with respect to the vector \(\vec{v}\) through an angle \(2\theta\) about \(\vec{q}\) or \(\vec{u}\) as the axis, or,</li> <li>an opposite rotation of the vector \(\vec{v}\) with respect to the coordinate frame through an angle \(2\theta\) about \(\vec{q}\) or \(\vec{u}\) as the axis.</li> </ul> </blockquote> <p>While the conjectural proof above may be intuitive and perhaps sufficient for some readers, I refer the more curious to Chapter 15.15 of <d-cite key="kuipers1999quaternions"></d-cite> for the full formal proofs of Theorem 1 and 2.</p> <h2 id="quaternion-operator-sequences">Quaternion Operator Sequences</h2> <p>We often find ourselves <em>applying</em> a sequence of rotations to the robot in many applications. To that end, it helps to know that the quaternion operators elegantly handle rotation sequences.</p> <blockquote> <p><strong>Theorem 3:</strong> Suppose that \(\mathbf{p}\) and \(\mathbf{q}\) are unit quaternions which define the quaternion rotation operators \(R_{\mathbf{p}}(\vec{u}) = \mathbf{p} \star \vec{u} \star \mathbf{p}^{\ast}\) and \(R_{\mathbf{q}}(\vec{v}) = \mathbf{q} \star \vec{v} \star \mathbf{q}^{\ast}\). Then the quaternion product \(\mathbf{q} \star \mathbf{p}\) defines a quaternion rotation operator \(R_{\mathbf{q} \star \mathbf{p}}\) which represents a sequence of operators, \(R_{\mathbf{p}}\) followed by \(R_{\mathbf{q}}\). The axis and the angle of rotation are those represented by the quaternion product \(\mathbf{q} \star \mathbf{p}\).</p> </blockquote> <p>The proof for which is easy and straightforward (for clarity, recall <em>Complex Conjugate</em> rules from <d-cite key="quat-basics"></d-cite>):</p> \[\begin{aligned} R_{\mathbf{q}}(R_{\mathbf{p}}(\vec{u})) &amp;= R_{\mathbf{q}}(\mathbf{p} \star \vec{u} \star \mathbf{p}^{\ast}) \\ &amp;= \mathbf{q} \star (\mathbf{p} \star \vec{u} \star \mathbf{p}^{\ast}) \star \mathbf{q}^{\ast} \\ &amp;= (\mathbf{q} \star \mathbf{p}) \star \vec{u} \star (\mathbf{q} \star \mathbf{p})^{\ast} \\ &amp;= R_{\mathbf{q} \star \mathbf{p}}(\vec{u}) \end{aligned}\] <p>Without much effort, one can easily extend Theorem 3 to the \(R_{\mathbf{q}^{\ast}}\) case.</p> <blockquote> <p><strong>Theorem 4:</strong> Suppose that \(\mathbf{p}\) and \(\mathbf{q}\) are unit quaternions which define the quaternion rotation operators \(R_{\mathbf{p}^{\ast}}(\vec{u}) = \mathbf{p}^{\ast} \star \vec{u} \star \mathbf{p}\) and \(R_{\mathbf{q}^{\ast}}(\vec{v}) = \mathbf{q}^{\ast} \star \vec{v} \star \mathbf{q}\). Then the quaternion product \(\mathbf{p} \star \mathbf{q}\) defines a quaternion rotation operator \(R_{(\mathbf{p} \star \mathbf{q})^{\ast}}\) which represents a sequence of operators, \(R_{\mathbf{p}^{\ast}}\) followed by \(R_{\mathbf{q}^{\ast}}\). The axis and the angle of rotation are those represented by the quaternion product \(\mathbf{p} \star \mathbf{q}\).</p> </blockquote> <p>The proof for Theorem 4 follows the same line of argument as that of Theorem 3’s so I leave that to you. To that end, I refer the readers to Chapter 15.16 of <d-cite key="kuipers1999quaternions"></d-cite> for more discussion and examples on this.</p> <h2 id="conclusion">Conclusion</h2> <p>This concludes my attempt to introduce robotics practitioners to quaternions and their rotation operators. Perhaps now is a good time to watch Grant Sanderson, a.k.a Mathematics YouTuber 3Blue1Brown’s videos on quaternions<d-cite key="3b1b"></d-cite>.</p> <p>As we conclude this journey, I urge you to venture further into the realm of quaternions as a Riemannian manifold. Riemannian manifolds are mathematical spaces that, like quaternions, possess local and global geometrical properties. They extend our understanding of spaces beyond the familiar Euclidean world, allowing us to model curved surfaces. To that end, I want to emphasize that treating unit quaternions as a Riemannian manifold has huge implications for optimization, imitation learning and other robotics applications<d-cite key="7829369"></d-cite><d-cite key="noemie2020thesis"></d-cite><d-cite key="Jaquier2018GeometryawareML"></d-cite><d-cite key="Calinon2019GaussiansOR"></d-cite><d-cite key="Silvrio2017LearningTP"></d-cite>. Through numerous research works, it has been shown that the marriage of quaternions and Riemannian geometry enables us to tackle complex problems with newfound precision and insight.</p> <p>May your explorations be filled with wonder and revelation.</p>]]></content><author><name>Akshay L Chandra</name></author><summary type="html"><![CDATA[Exploring the geometric effects of the quaternion rotation operator]]></summary></entry><entry><title type="html">[2/3] Towards a 3D Rotation Operator with a Quaternion Sandwich</title><link href="https://akshaychandra.com/blog/2023/quat-rot-op1/" rel="alternate" type="text/html" title="[2/3] Towards a 3D Rotation Operator with a Quaternion Sandwich"/><published>2023-10-07T00:00:00+00:00</published><updated>2023-10-07T00:00:00+00:00</updated><id>https://akshaychandra.com/blog/2023/quat-rot-op1</id><content type="html" xml:base="https://akshaychandra.com/blog/2023/quat-rot-op1/"><![CDATA[<blockquote> <p><strong>Citation Note:</strong> I have borrowed this article’s content from Jack B. Kuipers’ seminal 1999 book <d-cite key="kuipers1999quaternions"></d-cite> on quaternions.</p> </blockquote> <blockquote> <p>As an admirer of the book’s writing style, I submit that you are probably better off referring to Chapter 5 of the book. My motivation to write this regardless is twofold - to provide robotics practitioners with a one-stop-shop entry point to quaternions and challenge/improve my understanding of them. I claim no expertise in this topic but found it so fascinating that I decided to write about it.</p> </blockquote> <blockquote> <p><strong>Prerequisites:</strong> This is [2/3] article in my series on quaternions. For this article, I assume readers’ familiarity with basic quaternion algebra <d-cite key="quat-basics"></d-cite> and rotation matrices and their basic properties<d-cite key="rotmat"></d-cite><d-cite key="rotmat2d"></d-cite><d-cite key="rotmat3d"></d-cite>.</p> </blockquote> <hr/> <h2 id="agenda">Agenda</h2> <p>After going back and forth about it in my mind, I have decided to write about the quaternion rotation operator in two parts:</p> <ul> <li>one that proposes a checklist of qualities necessary to be a reasonably good \(\mathbb{R}^3\) rotation operator and introduces the necessary tools to meet the checklist (this one)</li> <li>one that discusses the geometric effects of the quaternion rotation operator (next one <d-cite key="quat-rot-op2"></d-cite>)</li> </ul> <p>At the cost of clarity, I am probably risking losing readers’ attention and I only hope to keep you interested enough to stay aboard till the end of the series.</p> <h2 id="quaternion-rotation-operator-checklist">Quaternion Rotation Operator: Checklist</h2> <p>As we know, rotation matrices are \(3 \times 3\) orthogonal matrices with determinant 1 (unimodular). In fact, one can use any \(3 \times 3\) matrix \(R\) that satisfies the orthogonality and the unimodularity<d-footnote>A matrix is unimodular if it has a determinant 1 or -1. But in this case, I am only talking about it being 1.</d-footnote> properties to represent rotations in \(\mathbb{R}^3\). To find a vector \(\vec{v}\)’s rotated image \(\vec{w}\) under \(R\), we simply do the left matrix multiplication between \(R\) and a column matrix that whose entries are components of \(\vec{v}\) i.e., \(R\vec{v}\). It helps to recollect that the image \(\vec{w}\), thanks to the unimodularity of \(R\), has the same magnitude as \(\vec{v}\). If one were to <em>invent</em> a quaternion rotation operator, say \(R_{\mathbf{q}}\) (associated with the quaternion \(\mathbf{q}\)), it should satisfy the following:</p> \[\vec{w} = R_{\mathbf{q}}(\vec{v})\] <p>And more importantly, similar to rotation matrices, the operator \(R_{\mathbf{q}}\) should somehow bring about a notion of an axis and an angle of rotation to it. Of course the quaternion operator should also be able to reproduce other properties such as sequence of rotations i.e., have an equivalent form of \(R_1R_2R_3\vec{v}\), say \(R_{\mathbf{q}_1\mathbf{q}_2\mathbf{q}_3}\) and reverse rotations (e.g. \(R_1^{-1}R_2R_3\vec{v}\)) and more.</p> <p>Perhaps we’ll worry about them later but at its core, it appears that the four fundamental desirable qualities of rotation operator \(R_{\mathbf{q}}\) are as follows:</p> <ol> <li>\(R_{\mathbf{q}}\) should be able to operate on vectors.</li> <li>\(R_{\mathbf{q}}\) should always output a vector in \(\mathbb{R}^3\).</li> <li>\(R_{\mathbf{q}}\) shouldn’t scale the vectors.</li> <li>\(R_{\mathbf{q}}\) should associate with an angle<d-footnote>Also an axis of rotation but we look at that in my next article.</d-footnote> unique to \(\mathbf{q}\).</li> </ol> <p>By the end of this article, we will see that this checklist is indeed fulfilled with quaternions albeit with some upgrades.</p> <h2 id="pure-quaternions">Pure Quaternions</h2> <p>How can quaternions which are in \(\mathbb{R}^4\) operate on vectors in \(\mathbb{R}^3\)? Thanks to the Scalar + Vector model we discussed in <d-cite key="quat-basics"></d-cite>, a vector can be interpreted as a <em>pure quaternion</em><d-footnote>One might argue that real numbers are just scalar parts of quaternions. And why shouldn't they?</d-footnote> i.e., \(\mathbf{v} = 0 + \vec{v}\). So \(Q_0\), the set of all pure quaternions, is a subset of \(Q\), the set of all quaternions. To that end, we can easily verify that:</p> <ul> <li>Quaternion addition between any two pure quaternions</li> <li>Quaternion multiplication between any two pure quaternions</li> <li>Quaternion multiplication between a scalar and a pure quaternion</li> </ul> <p>provide a <em>one-to-one correspondence</em> between \(\mathbb{R}^3\) and \(Q_0\). This is great and goes toward items 1 and 2 on our checklist.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/pure_quat.png" sizes="95vw"/> <img src="/assets/img/blog/pure_quat.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Source: Jack B Kuipers. Quaternions and Rotation Sequences (1999)</figcaption> </figure> <p>However, multiplication (See Eq. \((1)\) from <d-cite key="quat-basics"></d-cite> for clarity) between a general and a pure quaternion doesn’t <em>always</em> give us the same desirable one-to-one mapping. Still, it exists and is as follows:</p> \[\begin{aligned} \mathbf{q} \star \mathbf{v} &amp;= (q_0 + \vec{q}) \star (0 + \vec{v}) \\ &amp;= q_0 \cdot 0 - \vec{q} \cdot \vec{v} + 0 \cdot \vec{q} + q_0\vec{v} + \vec{q} \times \vec{v}\\ &amp;= -\vec{q} \cdot \vec{v} + q_0\vec{v} + \vec{q} \times \vec{v} \hspace{10cm} \text{(1)} \end{aligned}\] <p>It is now clear that quaternion multiplication allows us to operate on vectors, as one should expect if one wants to define an \(\mathbb{R}^3\) rotation operator based on quaternions.</p> <blockquote> <p><strong>:heavy_check_mark: Item 1 in the list is checked. Quaternions can indeed operate on vectors, a.k.a pure quaternions, in a rather straightforward way.</strong></p> </blockquote> <h2 id="quaternion-sandwich-product">Quaternion Sandwich Product</h2> <p>For quaternions to operate on vectors in \(\mathbb{R}^3\), it would have helped a lot in favour of item 2 in our list if their multiplication led to a one-to-one correspondence between \(\mathbb{R}^3\) and \(Q_0\). However, we see in Eq. \(\text{(1)}\) that the <em>double</em> product still has a scalar part. This is why the <em>double</em> products \(\mathbf{q} \star \mathbf{v}\) and \(\mathbf{v} \star \mathbf{q}\)<d-footnote>The commutation does not change the scalar part.</d-footnote> do not have a place in \(R_{\mathbf{q}}\). This suggests that the quaternion operator \(R_{\mathbf{q}}\) must have a <em>triple</em> or even higher order quaternion multiplication in it.</p> <p>As one should, let us see if a <em>triple</em> product gives us what we want and what we want is to be able to stay in \(\mathbb{R}^3\) after the multiplication. Consider two general quaternions \(\mathbf{p}=p_0 + \vec{p}\) and \(\mathbf{q} = q_0 + \vec{q}\) and a pure quaternion \(\mathbf{v} = 0 + \vec{v}\). There are six possible products involving these three quaternions:</p> \[\begin{aligned} &amp;\mathbf{p} \star \mathbf{q} \star \mathbf{v} \quad \mathbf{q} \star \mathbf{v} \star \mathbf{p} \quad \mathbf{v} \star \mathbf{p} \star \mathbf{q} \\ &amp;\mathbf{q} \star \mathbf{p} \star \mathbf{v} \quad \mathbf{p} \star \mathbf{v} \star \mathbf{q} \quad \mathbf{v} \star \mathbf{q} \star \mathbf{p} \end{aligned}\] <p>On examination, we see that all products where \(\mathbf{p}\) and \(\mathbf{q}\) are together lead to the same problem we discussed earlier. Their product, regardless of the order, would return another general quaternion, making them <em>double</em> products. Our last hope seems to be in the two leftover <em>triple</em> products <d-footnote>Although, I suspect the section's title must have given away the plot already.</d-footnote></p> \[\mathbf{p} \star \mathbf{v} \star \mathbf{q} \quad \quad \mathbf{q} \star \mathbf{v} \star \mathbf{p}\] <p>Despite the uninteresting exercise, lets expand the <em>triple</em> products, say \(\mathbf{p} \star \mathbf{v} \star \mathbf{q}\).</p> \[\begin{aligned} \mathbf{p} \star \mathbf{v} \star \mathbf{q} &amp;= (\mathbf{p} \star \mathbf{v}) \star \mathbf{q} \\ &amp;= (-\vec{p}\cdot\vec{v} + p_0\vec{v} + \vec{p} \times \vec{v}) \star \mathbf{q} \\ &amp;= - q_0 \vec{p}\cdot\vec{v} - (p_0\vec{v} + \vec{p} \times \vec{v}) \cdot \vec{q} + (-\vec{p}\cdot\vec{v})\cdot\vec{q} \\ &amp;\quad + q_0(p_0\vec{v} + \vec{p} \times \vec{v}) + (p_0\vec{v} + \vec{p} \times \vec{v}) \times \vec{q} \\ &amp;= - q_0 (\vec{p}\cdot\vec{v}) - p_0(\vec{v} \cdot \vec{q}) - (\vec{p} \times \vec{v}) \cdot \vec{q} \\ &amp; \quad - (\vec{p}\cdot\vec{v})\cdot\vec{q} + q_0(p_0\vec{v} + \vec{p} \times \vec{v}) \\ &amp; \quad + (p_0\vec{v} + \vec{p} \times \vec{v}) \times \vec{q} \end{aligned}\] <p>Separating out the scalar part from above, we have:</p> \[- q_0 (\vec{p}\cdot\vec{v}) - p_0(\vec{v} \cdot \vec{q}) - (\vec{p} \times \vec{v}) \cdot \vec{q}\] <p>We may rewrite this with a little bit of vector algebra trickery as:</p> \[- q_0 (\vec{p}\cdot\vec{v}) - p_0(\vec{v} \cdot \vec{q}) + (\vec{p} \times \vec{q}) \cdot \vec{v}\] <p>Recall that if this <em>triple</em> product were to be inside \(R_{\mathbf{q}}\), it should output a pure quaternion. So we have to choose \(\mathbf{p}\) and \(\mathbf{q}\) such that the scalar part goes to \(0\) for all pure quaternions. Examining the cross product term, we see that \((\vec{p} \times \vec{q}) \cdot \vec{v}\) would go to \(0\) if \(\mathbf{p}\) and \(\mathbf{q}\) are parallel to each other i.e., if \(\mathbf{p} = k\mathbf{q}\) for non-zero \(k\) since we are dealing with non-zero vectors \(\vec{p}\) and \(\vec{q}\)<d-footnote>Note that this is a fair assumption to make. We have full control over the quaternions; however, there is not much on the vector to be rotated.</d-footnote>. Substituting this back in the scalar part expression, we get</p> \[\begin{aligned} &amp;\Rightarrow - q_0 (k\vec{q}\cdot\vec{v}) - p_0(\vec{v} \cdot \vec{q}) + (k\vec{q} \times \vec{q}) \cdot \vec{v} \\ &amp;\Rightarrow - q_0k (\vec{q}\cdot\vec{v}) - p_0(\vec{q}\cdot\vec{v}) + 0 \cdot \vec{v} \\ &amp;\Rightarrow -(q_0k+p_0)(\vec{q}\cdot\vec{v}) \end{aligned}\] <p>It is easy to verify that the above expression goes to \(0\) when \(\vec{q}\) and \(\vec{v}\) are parallel to each other or if \(k=-1\) and \(p_0 = q_0\) which would simply mean that</p> \[\mathbf{p} = p_0 + \vec{p} = q_0 -\vec{q} \Rightarrow \mathbf{p} = \mathbf{q}^{\ast}\] <p>From this discussion, we obtain two <em>triple</em> quaternion products that always output a pure quaternion whenever they <em>sandwich</em> (hence the name) a pure quaternion, although it is not yet clear how they differ from each other</p> \[\mathbf{q} \star \mathbf{v} \star \mathbf{q}^{\ast} \quad \quad \mathbf{q}^{\ast} \star \mathbf{v} \star \mathbf{q}\] <p>The algebraic action of \(\mathbf{w} = \mathbf{q} \star \mathbf{v} \star \mathbf{q}^{\ast}\) is illustrated in the figure below.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/quat_sandwich.png" sizes="95vw"/> <img src="/assets/img/blog/quat_sandwich.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Source: Jack B Kuipers. Quaternions and Rotation Sequences (1999)</figcaption> </figure> <p>A natural question to raise is - what geometric interpretation can we give this sandwich product? I study their geometric considerations more closely in my next article <d-cite key="quat-rot-op2"></d-cite>. But to see the geometrics, it helps to associate an angle with a quaternion. Is there some way to do that, analogous to the rotation matrices? In the later parts of this article, you will see that there is indeed a way to associate an angle with quaternions.</p> <blockquote> <p><strong>:heavy_check_mark: Item 2 in the list is checked as long as \(R_{\mathbf{q}}\) has sandwich product.</strong></p> </blockquote> <h2 id="unit-quaternions">Unit Quaternions</h2> <p>Unit quaternions i.e., \(\Vert \mathbf{q} \Vert^2 = (\mathbf{q}^{\ast} \star \mathbf{q}) = (\mathbf{q} \star \mathbf{q}^{\ast}) = 1\) are simply quaternions whose norm is 1. What is worth noting about unit quaternions is that their quaternion multiplication preserves membership in the \(\mathbf{S}^3\) space<d-footnote>A sphere in 4-dimensional space where each point represents a quaternion with magnitude 1.</d-footnote> of unit quaternions. That is, the quaternion product of two unit quaternions \(\mathbf{p}\) and \(\mathbf{q}\) i.e., \(\mathbf{p} \star \mathbf{q}\) will also be a unit quaternion and hence will still belong to the unit-sphere in \(\mathbf{S}^3\). This convenient geometric property allows us to do many cool things such as non-Euclidean calculus<d-cite key="boumal2023intromanifolds"></d-cite> with quaternions, something that could be exploited to learn geometry-aware models, say, a dynamical system on robot’s trajectory of both positions and orientations<d-cite key="7829369"></d-cite><d-cite key="noemie2020thesis"></d-cite><d-cite key="Jaquier2018GeometryawareML"></d-cite>. More importantly to our journey, it should be clear that the rotation operator \(R_{\mathbf{q}}\) should include unit quaternions and not general quaternions.</p> <p>Perhaps this is already obvious (from Eq. \((4)\) and Eq. \((5)\) of <d-cite key="quat-basics"></d-cite>), the quaternion sandwich product with unit quaternions wouldn’t change the magnitude of the pure quaternion \(\mathbf{v}\).</p> \[\begin{aligned} \Vert \mathbf{q} \star \mathbf{v} \star \mathbf{q}^{\ast} \Vert^2 &amp;= \Vert \mathbf{q} \Vert^2 \Vert \mathbf{v} \Vert^2 \Vert \mathbf{q}^{\ast} \Vert^2 \\ &amp;= \Vert \mathbf{v} \Vert^2 \end{aligned}\] <p>In fact, even for higher-order multiplication with unit quaternions, we see that the norm of the factors is preserved. Say, we have \(n\) unit quaternions \(\{\mathbf{q}_1, \mathbf{q}_2, ..., \mathbf{q}_n\}\) and a general quaternion \(\mathbf{p}\). The squared norm of their products in any order yields the same, as follows:</p> \[\begin{aligned} \Vert \mathbf{q}_1 \star ... \star \mathbf{p} \star ... \star \mathbf{q}_n \Vert^2 &amp;= \Vert \mathbf{p} \star \mathbf{q}_1 \star ... \star \mathbf{q}_n \Vert^2 \\ &amp;= \Vert \mathbf{q}_1 \star ... \star \mathbf{q}_n \star \mathbf{p} \Vert^2 \\ &amp;= \Vert \mathbf{p} \Vert^2 \end{aligned}\] <blockquote> <p><strong>:heavy_check_mark: Item 3 in the list is checked as long as the \(\mathbf{q}\) in \(R_{\mathbf{q}}\) is a unit quaternion.</strong></p> </blockquote> <h2 id="polar-form">Polar Form</h2> <h3 id="optional-complex-numbers">(Optional) Complex Numbers</h3> <p>Complex numbers<d-footnote>I bring complex numbers into the discussion for familiarity and easy visualisations. If this is obvious to you, please skip to the next subsection.</d-footnote> have an intuitive alternate form of representation to them. A complex number \(z = a + ib\) can be interpreted as a 2D vector on a complex plane where the horizontal axis is the real axis and the vertical axis is the imaginary axis, as shown in the figure below. A natural consequence of this is the polar or trigonometric form where \(z = a + ib\) can be represented with its polar pair \((r, \theta)\) such that \(r = \sqrt{a^2 + b^2}\) (norm) and \(\theta = \arctan (\frac{b}{a})\) (angle between complex vector and the real axes), from this it follows that \(\cos \theta = \frac{a}{r}\) and \(\sin \theta = \frac{b}{r}\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/complex_plane.png" sizes="95vw"/> <img src="/assets/img/blog/complex_plane.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now, we see that the following holds:</p> \[\begin{aligned} z &amp;= a + ib \\ &amp;= r \cos \theta + i (r \sin \theta) \\ &amp;= r (\cos \theta + i \sin \theta) \end{aligned}\] <p>Consequently, one can obtain the complex conjugate by simply replacing \(\theta\) with \(-\theta\), i.e.,</p> \[\begin{aligned} z^{\ast} &amp;= r (\cos (-\theta) + i \sin (-\theta)) \\ &amp;= r(\cos \theta - i \sin \theta) \end{aligned}\] <p>It helps to know that one can extend this to quaternions and write them in polar form just as well.</p> <h3 id="optional-a-special-property-of-complex-product">(Optional) A Special Property of Complex Product</h3> <p>The complex polar form allows us to spot a special property inherent to complex numbers. Consider two complex numbers:</p> \[\begin{aligned} z_1 &amp;= r_1(\cos \theta_1 + i \sin \theta_1)\\ z_2 &amp;= r_2(\cos \theta_2 + i \sin \theta_2) \end{aligned}\] <p>Their complex multiplication is as follows:</p> \[\begin{aligned} z_1z_2 &amp;= r_1(\cos \theta_1 + i \sin \theta_1) . r_2(\cos \theta_2 + i \sin \theta_2) \\ &amp;= r_1r_2(\cos \theta_1 \cos \theta_2 + i \cos \theta_1 \sin \theta_2 + i \sin \theta_1 \cos \theta_2 \\ &amp; \quad - \sin \theta_1 \sin \theta_2) \\ &amp;= r_1r_2(\cos \theta_1 \cos \theta_2 - \sin \theta_1 \sin \theta_2 \\ &amp;\quad + i (\cos \theta_1 \sin \theta_2 + \sin \theta_1 \cos \theta_2)) \\ &amp;= r_1r_2(\cos (\theta_1 + \theta_2) + i \sin (\theta_1 + \theta_2)) \end{aligned}\] <p>The geometric interpretation of the complex product is clear now. When two complex numbers are multiplied, you notice that the output complex number has an associated angle that is exactly the sum of angles associated with the multiplicands and has a magnitude equal to the product of magnitudes of the multiplicands.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/complex_product.png" sizes="95vw"/> <img src="/assets/img/blog/complex_product.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">This is true if a3+ib3 = (a1+ib1)(a2+ib2)</figcaption> </figure> <p>We can also verify that multiplying a complex number with another complex number’s conjugate essentially subtracts or <em>cancels</em> the former’s angle by latter’s angle. All of this is quite suggestive that complex numbers can be used to represent 2D rotations (also scaling for non-unit complex numbers), which is perhaps obvious or well-known to many. However, does this extend to quaternions? Yes. No. Maybe. We hope to find out soon!</p> <h3 id="quaternions">Quaternions</h3> <p>Quaternions, particularly unit quaternions, can also be written in polar form, albeit the interpretation of the angle \(\theta\) may not be as straightforward as it is for complex numbers. We know that a unit quaternion \(\mathbf{q} = q_0 + \vec{q}\) has norm 1 i.e., \(q_0^2 + \Vert \vec{q} \Vert^2 = 1\). And that for any angle \(\theta\), we know that \(\cos^2 \theta + \sin^2 \theta = 1\) holds. So there must be an angle \(\theta\) such that</p> \[\begin{aligned} \cos^2 \theta &amp;= q_0^2 \\ \sin^2 \theta &amp;= \Vert \vec{q} \Vert^2 \end{aligned}\] <p>The angle \(\theta\) can be defined uniquely as long as it stays within \((-\pi, \pi]\). But this is it, we now have an angle (although still unclear what it represents) associated with the quaternion \(\mathbf{q}\). We can take this form further by defining a unit vector \(\vec{u}\), which represents the direction of \(\vec{q}\):</p> \[\vec{u} = \frac{\vec{q}}{\Vert \vec{q} \Vert} = \frac{\vec{q}}{\sin \theta}\] <p>Then, we may be able to write all unit quaternions in terms of the associated angle \(\theta\) and the unit vector \(\vec{u}\) as</p> \[\mathbf{q} = q_0 + \vec{q} = \cos \theta + \vec{u} \sin \theta\] <p>Note, similar to complex numbers, for a quaternion expressed in this form, substituting \(-\theta\) for \(\theta\) (whatever geometric meaning the angle \(\theta\) might have) we get the complex conjugate of \(\mathbf{q}\). Which is,</p> \[\begin{aligned} \mathbf{q}^{\ast} &amp;= \cos (-\theta) + \vec{u} \sin (-\theta) \\ &amp;= \cos \theta - \vec{u} \sin \theta \end{aligned}\] <p>It is not too difficult to verify that if we replace \(\theta\) by \(-\theta\) of \(\mathbf{q}\) in one sandwich product, we get the other one out. So by the appropriate choice of the angle \(\theta\) these operators may, in fact, represent the same geometric transformation. I discuss more of this in <d-cite key="quat-rot-op2"></d-cite></p> <h3 id="a-special-property-of-quaternion-product">A Special Property of Quaternion Product</h3> <p>I hope you will have figured out where I am going with this by now. Consider two unit quaternions:</p> \[\begin{aligned} \mathbf{q}_1 &amp;= \cos \theta_1 + \vec{u} \sin \theta_1\\ \mathbf{q}_2 &amp;= \cos \theta_2 + \vec{u} \sin \theta_2 \end{aligned}\] <p>The quaternion product of these two (see \((1)\) in <d-cite key="quat-basics"></d-cite> for clarity) gives</p> \[\begin{aligned} \mathbf{q}_1 \star \mathbf{q}_2 &amp;= (\cos \theta_1 + \vec{u} \sin \theta_1)(\cos \theta_2 + \vec{u} \sin \theta_2) \\ &amp;= \cos \theta_1 \cos \theta_2 - (\vec{u} \sin \theta_1) \cdot (\vec{u} \sin \theta_2) \\ &amp; \quad + \cos \theta_1 (\vec{u} \sin \theta_2) + \cos \theta_2 (\vec{u} \sin \theta_1) + \vec{u} \sin \theta_1 \times \vec{u} \sin \theta_2 \\ &amp;= \cos \theta_1 \cos \theta_2 - \sin \theta_1 \sin \theta_2 \\ &amp; \quad + \vec{u} (\cos \theta_1 \sin \theta_2 + \sin \theta_1 \cos \theta_2)\\ &amp;= \cos (\theta_1 + \theta_2) + \vec{u} \sin (\theta_1 + \theta_2) \end{aligned}\] <p>Once again, very similar to complex numbers, this is an interesting result and has an important geometric implication. It says if we multiply two unit quaternions \(\mathbf{q}_1\) and \(\mathbf{q}_2\), each having the same unit vector \(\vec{u}\) in them, then the product is also a unit quaternion having this same unit vector \(\vec{u}\). And, associated with it is an angle that is exactly the sum of angles associated with \(\mathbf{q}_1\) and \(\mathbf{q}_2\). If, in fact, the quaternion rotation operator represents rotation, this property suggests that there is a possibility of sequencing rotations with different \(\mathbf{q}\)s, a property enjoyed by the rotation matrices.</p> <blockquote> <p><strong>:heavy_check_mark: Item 4 in the list is checked as we showed that it is possible to associate an angle \(\theta\) with unit quaternions.</strong></p> </blockquote> <h2 id="conclusion">Conclusion</h2> <p>We looked at some quaternion tricks, upgrades and forms that allow us to go from a 4-tuple vector with seemingly arbitrary product rules to a 3D rotation operator. We defined a checklist at the beginning and I would like to think that I convinced you that quaternions indeed meet all of them without room for doubt<d-footnote>I would love to answer or just ponder your questions, if any. Please feel free to write them in the comments below.</d-footnote>. Given a 3D vector as a pure quaternion \(\mathbf{v}\) and a unit quaternion \(\mathbf{q}\), we have seen considerable evidence that the quaternion rotation operator \(R_{\mathbf{q}}\) should have the form</p> \[R_{\mathbf{q}}(\mathbf{v}) = \mathbf{q} \star \mathbf{v} \star \mathbf{q}^{\ast} \quad \text{or} \quad \mathbf{q}^{\ast} \star \mathbf{v} \star \mathbf{q}\] <p>and that it is in some way related to rotations in \(\mathbb{R}^3\). However, I accept that there is still a lot to be discussed and investigated, especially the geometric effects of the sandwich product when applied to an arbitrary \(\mathbb{R}^3\) vector. I wrote about exactly this in the next article of this series <d-cite key="quat-rot-op2"></d-cite>. There we take the sandwich product to a couple of field tests and reverse engineer the output vector with some convenient visualisations.</p>]]></content><author><name>Akshay L Chandra</name></author><summary type="html"><![CDATA[All the nuts and bolts needed to go from quaternions to a quaternion rotation operator]]></summary></entry><entry><title type="html">[1/3] Quaternions: Basic Algebra</title><link href="https://akshaychandra.com/blog/2023/quaternion-basics/" rel="alternate" type="text/html" title="[1/3] Quaternions: Basic Algebra"/><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://akshaychandra.com/blog/2023/quaternion-basics</id><content type="html" xml:base="https://akshaychandra.com/blog/2023/quaternion-basics/"><![CDATA[<blockquote> <p><strong>Citation Note:</strong> For this article, I have borrowed many things, sometimes “as is”, from:</p> </blockquote> <ul> <li>Prof. Jack B. Kuipers’ seminal 1999 book <d-cite key="kuipers1999quaternions"></d-cite></li> <li>Prof. Hans-Peter Schröcker’s talk<d-cite key="schroecker2022iros"></d-cite> at IROS 2022</li> <li>Prof. Andrew Hanson’s book on quaternions<d-cite key="visquat"></d-cite></li> <li>Section I of Keith Conrad’s notes<d-cite key="conrad-quat-algebras"></d-cite>.</li> </ul> <blockquote> <p>This article merely reproduces their work, perhaps put together concisely in one place. My motivation to write this is twofold - to provide robotics practitioners a one-stop-shop entry point to quaternions and challenge/improve my understanding of them. I claim no expertise in this topic but found it so fascinating that I decided to write about it.</p> </blockquote> <blockquote> <p><strong>Prerequisites:</strong> This is [1/3] article in my series on quaternions. For this article, I assume no familiarity with quaternions, to the point that some parts may come across as pedantic. I do not, however, talk about representing 3D rotations via quaternions in this one, I leave that to my next article<d-cite key="quat-rot-op1"></d-cite>. My goal here is only to ensure readers get comfortable with the idea of quaternion addition, multiplication, conjugate, and norm.</p> </blockquote> <hr/> <h2 id="motivation">Motivation</h2> <p>Quaternions can efficiently represent rotations in 3D Euclidean space. Alternatively, one can turn to Euler angles<d-cite key="eulerangles"></d-cite> or to \(3 \times 3\) orthogonal matrices with determinant \(1\) i.e., rotation matrices<d-cite key="rotmat"></d-cite><d-cite key="rotmat2d"></d-cite><d-cite key="rotmat3d"></d-cite>. While rotation matrices are great in their own right, for their nine elements, they have only three degrees of freedom (redundant information) and lack geometric interpretation in their natural form<d-footnote>Well, determining rotation axis and angle need a few steps of calculations.</d-footnote>. On the other hand, a quaternion is a 4-tuple that represents 3D rotations but with a more concise form with <em>arguably</em> better geometric interpretations. It elegantly sidesteps the Gimbal Lock and ambiguity problems of Euler angles<d-cite key="visquat"></d-cite><d-cite key="eulerproblems"></d-cite><d-cite key="eulerproblems2"></d-cite> and numerical error accumulation problems of rotation matrices. Quaternions also provide a natural way of interpolating between orientations.</p> <p>To that end, I refer the readers to Chapter 2 of Prof. Andrew Hanson’s book “Visualizing Quaternions”<d-cite key="visquat"></d-cite> where he rigorously discusses how both NASA astronauts and Hollywood film directors may prefer quaternions over other representations.</p> <h2 id="history">History</h2> <p>Quaternions were introduced by W. R. Hamilton in 1843<d-cite key="hamilton1844quaternions"></d-cite>. The complex number we learn in highschool is a sum \(a+ib\) with \(a, b \in \mathbb{R}\) and \(i^2 = -1\). Addition and multiplication rules are given by</p> \[\begin{aligned} (a + ib) + (c + id) &amp; = (a + b) + (b + d)i \\ (a + ib)(c + id) &amp; = (ac - bd) + (ad + bc)i \end{aligned}\] <p>Hamilton avoided explaining what \(i\) is by declaring \(a+ib\) as ordered pairs \((a,b) \in \mathbb{R}^2\) with the following rules</p> \[\begin{aligned} (a, b) + (c, d) &amp; = (a + c, b + d) \\ (a, b)(c, d) &amp; = (ac - bd)(ad + bc) \\ (a, b) + (0, 0) &amp; = (a, b) \quad \text{(Additive identity)} \\ (a, b)(1, 0) &amp; = (a, b) \quad \text{(Multiplicative identity)} \end{aligned}\] <p>So \((a,b) = (a,0) + (0,b) = a(1,0) + b(0,1)\) is essentially \(a+ib\) if we define \(i\) as \((0, 1)\). While trying to extend this to three dimensions and find triples \((a, b, c)\), he instead discovered a way to multiply in four dimensions at the cost of abandoning commutativity of multiplcation<d-cite key="conrad-quat-algebras"></d-cite>. Legend has it that the idea to add the fourth dimension struck him while walking with his wife Helen at the Royal Irish Academy, and that he noted down the quaternion equations as they passed the Broom Bridge<d-cite key="broom"></d-cite> of the Royal Canal. A stone plaque at the exact location carved with the following equations was later commemorated:</p> \[i^2 = j^2 = k^2 = ijk = -1\] <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/William_Rowan_Hamilton_Plaque.jpg" sizes="95vw"/> <img src="/assets/img/blog/William_Rowan_Hamilton_Plaque.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Source: Wikipedia</figcaption> </figure> <p>If mathematics and its history interests you, I refer you to this YouTube video by “Kathy Loves Physics and History”<d-cite key="kathy-quat-history"></d-cite>. In a subsequent video, she explains how the discovery of quaternions (with Maxwell’s equations) ultimately led to Vector Analysis<d-cite key="kathy-quat-history2"></d-cite>.</p> <h2 id="definition">Definition</h2> <p>The quaternions are</p> \[\mathbb{H} = \{a + bi + cj + dk: a, b, c, d \in \mathbb{R}\},\] <p>where the following rules are imposed:</p> <ul> <li> \[i^2 = j^2 = k^2 = -1 \hspace{50cm}\] </li> <li> \[ij=k, ji=-k, jk=i, kj=-i, ki=j, ki=j, ik=-j \hspace{50cm}\] </li> <li>every \(a \in \mathbb{R}\) commutes with \(i, j, k\)</li> </ul> <p>One could always look at the circle below to remember the multiplicative rules of \(i, j, k\). Products following the below order get a plus sign, otherwise a minus sign, \(e.g., ij = k\) and \(ji = -k\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/ijk.jpg" sizes="95vw"/> <img src="/assets/img/blog/ijk.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Source: Keith Conrad</figcaption> </figure> <h3 id="quick-comparison-with-complex-numbers">Quick Comparison with Complex Numbers</h3> <table> <tbody> <tr> <td>Complex Numbers \(\mathbb{C}\)</td> <td>\(c = a +bi, \quad a,b \in \mathbb{R}, \quad i^2=-1\)</td> </tr> <tr> <td>Complex Conjugate</td> <td>\(c^{\ast} = a -bi\)</td> </tr> <tr> <td>Real Part</td> <td>\(\text{Re}(c) = \frac{1}{2}(c + c^{\ast}) = a\)</td> </tr> <tr> <td>Imaginary Part</td> <td>\(\text{Im}(c) = \frac{1}{2}(c - c^{\ast}) = b\)</td> </tr> <tr> <td>Quadrance and Norm</td> <td>\(cc^{\ast} = a^2 + b^2, \quad \Vert c \Vert = \sqrt{cc^{\ast}}\)</td> </tr> <tr> <td>Inverse</td> <td>\(c^{-1} = \frac{c^{\ast}}{cc^{\ast}}\)</td> </tr> </tbody> </table> <p>Even though we haven’t seen how two quaternions add and multiply in detail, the following table summarizes most of theis article in a concise way.</p> <table> <tbody> <tr> <td>Quaternions \(\mathbb{H}\)</td> <td>\(\mathbf{q} = q_0 + q_1i + q_2j + q_3k, \ q_n \in \mathbb{R}, \ i^2 = j^2 = k^2 = ijk = -1\)</td> </tr> <tr> <td>Complex Conjugate</td> <td>\(\mathbf{q}^{\ast} = q_0 - q_1i - q_2j - q_3k\)</td> </tr> <tr> <td>Real Part</td> <td>\(\text{Re}(\mathbf{q}) = \frac{1}{2}(\mathbf{q} + \mathbf{q}^{\ast}) = q_0\)</td> </tr> <tr> <td>Imaginary Part</td> <td>\(\text{Im}(\mathbf{q}) = \frac{1}{2}(\mathbf{q} - \mathbf{q}^{\ast}) = q_1i +q_2j + q_3k\)</td> </tr> <tr> <td>Quadrance and Norm</td> <td>\(\mathbf{q}\mathbf{q}^{\ast} = q_0^2 + q_1^2 + q_3^2 + q_4^2, \quad \Vert \mathbf{q} \Vert = \sqrt{\mathbf{q}\mathbf{q}^{\ast}}\)</td> </tr> <tr> <td>Inverse</td> <td>\(\mathbf{q}^{-1} = \frac{\mathbf{q}^{\ast}}{\mathbf{q}\mathbf{q}^{\ast}}\)</td> </tr> </tbody> </table> <h3 id="an-example-for-clarity">An Example for Clarity</h3> <p>Solve \((3i - 5j)(5k + 9i)\).</p> \[\begin{aligned} &amp; \Rightarrow 3i \times 5k + 3i \times 9i - 5j \times 5k - 5j \times 9i \\ &amp; \Rightarrow 15(ik) + 27(i^2) - 25(jk) - 45(ji) \\ &amp; \Rightarrow 15(-j) + 27(-1) - 25(i) - 45(-k) \\ &amp; \Rightarrow -27 -25i -15j + 45k \end{aligned}\] <h2 id="quaternion-models">Quaternion Models</h2> <p>There is more than one way to interpret quaternions. Some are more intuitive than others and we see three below.</p> <h3 id="four-dimensional-vectors">Four-Dimensional Vectors</h3> <p>A straightforward way of thinking about quaternions is to treat them as four-dimensional vectors.</p> \[\begin{aligned} \mathbf{p} &amp; = p_0 + p_1i + p_2j + p_3k = (p_0, p_1, p_2, p_3)^{\top} \\ \mathbf{q} &amp; = q_0 + q_1i + q_2j + q_3k = (q_0, q_1, q_2, q_3)^{\top} \end{aligned}\] <p>To avoid operator overload with the dot product, I introduce \(\star\) as the quaternion multiplication operator. Now, the quaternion multiplication between \(\mathbf{p}\) and \(\mathbf{q}\) can be written in matrix form as follows <d-footnote>See the following subsection for a full derivation of quaternion multiplication.</d-footnote></p> \[\begin{aligned} \mathbf{p} \star \mathbf{q} &amp;= \left[ \begin{matrix} p_0q_0 - p_1q_1 - p_2q_2 - p_3q_3 \\ p_0q_1 + p_1q_0 + p_2q_3 - p_3q_2 \\ p_0q_2 - p_1q_3 + p_2q_0 + p_3q_1 \\ p_0q_3 + p_1q_2 - p_2q_1 + p_3q_0 \end{matrix} \right] \\ &amp;= \left[ \begin{matrix}p_0 &amp; -p_1 &amp; -p_2 &amp; -p_3 \\ p_1 &amp; p_0 &amp; -p_3 &amp; -p_2 \\ p_2 &amp; p_3 &amp; p_0 &amp; -p_1 \\ p_3 &amp; -p_2 &amp; p_1 &amp; p_0\end{matrix} \right] \left[ \begin{matrix} q_0 \\ q_1 \\ q_2 \\ q_3 \end{matrix} \right] = \mathbf{P}. \mathbf{q} \end{aligned}\] <p>It can be convenient to represent quaternion multiplication using matrix multiplication. One can see that \(\mathbf{P}\) is an orthogonal matrix (\(\mathbf{P}^{\top} \mathbf{P} = I_4\)) in 4D Euclidean space. However, this model still lacks geometric interpretations in 3D.</p> <h3 id="two-by-two-matrices">Two-By-Two Matrices</h3> <p>Another way of thinking about quaternions is to treat them as products of simple \(2 \times 2\) matrices:</p> \[\begin{aligned} U &amp;:= \left[ \begin{matrix} 1 &amp; 0 \\ 0 &amp; 1 \end{matrix}\right], \; I := \left[ \begin{matrix} i &amp; 0 \\ 0 &amp; -i \end{matrix}\right], \\ J &amp;:= \left[ \begin{matrix} 0 &amp; 1 \\ -1 &amp; 0 \end{matrix}\right], \; K := \left[ \begin{matrix} 0 &amp; i \\ i &amp; 0 \end{matrix}\right] \end{aligned}\] \[I^2 = J^2 = K^2 = IJK = -U\] <p>Then we have</p> \[\begin{aligned} \mathbf{q} &amp; \approx Q = q_0U + q_1I + q_2J + q_3K \\ \mathbf{q^{\ast}} &amp; \approx adj(Q), \quad \mathbf{qq^{\ast}} \approx det(Q) \quad \mathbf{q}^{-1} \approx Q^{-1} \end{aligned}\] <p>As Prof. Schröcker says in his presentation<d-cite key="schroecker2022iros"></d-cite> - “When in doubt, think of matrix multiplication!”.</p> <h3 id="scalar--vector">Scalar + Vector</h3> <p>This is perhaps the most interesting model and from now on, we stick to this one. Recall from the comparisons with complex numbers, we define the real and imaginary parts of a quaternion as follows:</p> \[\begin{aligned} \text{Re}(\mathbf{q}) &amp; = \frac{1}{2}(\mathbf{q} + \mathbf{q}^{\ast}) = q_0 \quad \text{(Scalar Part)} \\ \text{Im}(\mathbf{q}) &amp; = \frac{1}{2}(\mathbf{q} - \mathbf{q}^{\ast}) = q_1i +q_2j + q_3k \quad \text{(Vector Part)} \end{aligned}\] <p>Assuming the standard orthonormal basis for \(\mathbb{R}^3\) is given by three unit vectors \(i=(1, 0, 0), j=(0, 1, 0), k=(0, 0, 1)\), quaternions can be seen as a sum of a \(q_0\) scalar and a vector \(\vec{q} = (q_1, q_2, q_3)\). Namely,</p> \[\mathbf{q} = q_0 + q_1i + q_2j + q_3k = q_0 + \vec{q}\] <p>Which makes \(\mathbb{H} = \mathbb{R} \oplus \mathbb{R}^3\). This has major geometric significance and you will soon see why. With this, it should be straightforward to derive addition and multiplication equations for two quaternions now.</p> <h2 id="quaternion-algebra">Quaternion Algebra</h2> <p>Let us derive the basic quaternion operations in Scalar + Vector form.</p> <h3 id="addition">Addition</h3> <p>Addition operation is rather straightforward from our understanding of scalar and vector additions.</p> \[\begin{aligned} \mathbf{p} + \mathbf{q} &amp; = (p_0 + q_0) + (p_1 + q_1)i + (p_2 + q_2)j + (p_3 + q_3)k \\ &amp; = (p_0 + q_0) + (\vec{p} + \vec{q}) \end{aligned}\] <h3 id="multiplication">Multiplication</h3> <p>Similar to addition, first, let us write out the multiplication of two quaternions the naive way and see if we can transform it to the Scalar + Vector form.</p> \[\begin{aligned} \mathbf{p} \star \mathbf{q} &amp;= (p_0 + p_1i + p_2j + p_3k) (q_0 + q_1i + q_2j + q_3k) \\ \\ &amp;= p_0q_0 + p_0(q_1i + q_2j + q_3k) + p_1q_0i \\ &amp;\quad + p_1i(q_1i + q_2j + q_3k) + p_2q_0j + p_2j(q_1i + q_2j + q_3k) \\ &amp;\quad + p_3q_0k + p_3k(q_1i + q_2j + q_3k) \\ \\ &amp;= p_0q_0 + p_0(q_1i + q_2j + q_3k) + p_1q_0i + p_1q_1(i^2) \\ &amp;\quad + p_1q_2(ij) + p1q_3(ik) + p_2q_0j + p_2q_1(ji) \\ &amp;\quad + p_2q_2(j^2) + p_2q_3(jk) + p_3q_0k + p_3q_1(ki) \\ &amp;\quad + p_3q_2(kj) + p_3q_3(k^2) \\ \\ &amp; = p_0q_0 + p_0(q_1i + q_2j + q_3k) + q_0(p_1i + p_2j+ p_3k) + p_1q_1(i^2) \\ &amp;\quad + p_1q_2(ij) + p_1q_3(ik) + p_2q_1(ji) + p_2q_2(j^2) \\ &amp;\quad + p_2q_3(jk) + p_3q_1(ki) + p_3q_2(kj) + p_3q_3(k^2) \\ \\ &amp;= p_0q_0 + p_0(q_1i + q_2j + q_3k) + q_0(p_1i + p_2j+ p_3k) + p_1q_1(-1) \\ &amp;\quad + p_1q_2(k) + p_1q_3(-j) + p_2q_1(-k) + p_2q_2(-1) \\ &amp;\quad + p_2q_3(i) + p_3q_1(j) + p_3q_2(-i) + p_3q_3(-1) \\ \\ &amp;= p_0q_0 + p_0\textcolor{orange}{(q_1i + q_2j + q_3k)} + q_0\textcolor{lime}{(p_1i + p_2j+ p_3k)} \\ &amp;\quad - \textcolor{cyan}{(p_1q_1+p_2q_2 +p_3q_3)} \\ &amp;\quad + \textcolor{pink}{(p_2q_3 - p_3q_2)i + (p_3q_1 - p_1q_3)j} + \textcolor{pink}{(p_1q_2 - p_2q_1)k} \hspace{5cm} \end{aligned}\] <p>Phew! Reminiscent of the Four-Dimensions model, one can see how quickly quaternion products in their naive form become cumbersome, unintuitive and inconvenient. Thankfully, the Scalar + Vector model allows us to rewrite the above equation in terms of dot and cross products as follows:</p> \[\mathbf{p} \star \mathbf{q} = p_0q_0 -\textcolor{cyan}{\vec{p} \cdot \vec{q}} + p_0\textcolor{orange}{\vec{q}} + q_0\textcolor{lime}{\vec{p}} + \textcolor{pink}{\vec{p} \times \vec{q}} \tag{1}\] <p>This is great! Finally, we reach a point where we can simply add scalars (\(p_0q_0 -\textcolor{cyan}{\vec{p} \cdot \vec{q}}\)) and 3D vectors (\(p_0\textcolor{orange}{\vec{q}} + q_0\textcolor{lime}{\vec{p}} + \textcolor{pink}{\vec{p} \times \vec{q}}\)) to compute quaternion multiplication. Eq. \(\text{(1)}\) allows us to make the following observations:</p> <ul> <li>The source of non-commutativity of quaternion multiplication is now clear, i.e., \(\vec{p} \times \vec{q} = - \vec{q} \times \vec{p}\)</li> <li>Two non-zero quaternions can commute only when their vector parts are linearly dependent (parallel) i.e., \(\mathbf{p} \star \mathbf{q} = \mathbf{q} \star \mathbf{p} \Leftrightarrow \vec{p} \times \vec{q} = 0 \hspace{50cm}\)</li> <li>Only scalars commute with all quaternions, i.e., \(c \star \mathbf{q} = cq_0 + c\vec{q} = c \mathbf{q} = \mathbf{q} \star c\).</li> <li>Since quaternion multiplication is just a combination of scalar-vector, dot and cross products in \(\mathbb{R}^3\) (Euclidean space), it <em>must</em> have some geometric significance, it <em>must</em> describe something independent of the values of \(\mathbf{p}\) and \(\mathbf{q}\). I discuss this in detail in <d-cite key="quat-rot-op2"></d-cite>.</li> </ul> <h3 id="complex-conjugate">Complex Conjugate</h3> <p>The <em>conjugate</em> of a quaternion \(\mathbf{q}\) is denoted by \(\mathbf{q^{\ast}}\) and defined as</p> \[\mathbf{q^{\ast}} = q_0 - q_1i - q_2j - q_3k = q_0 - \vec{q} \tag{2}\] <p>From the definition, it follows that:</p> \[\begin{aligned} (\mathbf{q^{\ast}})^{\ast} &amp; = q_0 - (-\vec{q}) = \mathbf{q} \\ \mathbf{q} + \mathbf{q^{\ast}} &amp; = 2q_0 \\ \mathbf{q} - \mathbf{q^{\ast}} &amp; = 2\vec{q} \\ \mathbf{q^{\ast}} \star \mathbf{q} &amp; = (q_0 - \vec{q}) \star (q_0 + \vec{q}) \\ &amp; = q_0q_0 - (-\vec{q}) \cdot \vec{q} + q_0\vec{q} \\ &amp; \quad + (-\vec{q})q_0 + (-\vec{q}) \times \vec{q} \quad \text{(from Eq. (1))} \\ &amp; = q_0^2 + \vec{q} \cdot \vec{q} \\ &amp; = q_0^2 + q_1^2 + q_2^2 + q_3^2 \quad \text{(Quadrance)} \\ &amp; = \mathbf{q} \star \mathbf{q^{\ast}} \quad \text{(Commutative)} \\ \end{aligned}\] <p>We can also easily derive the conjugate of a quaternion multiplication.</p> \[\begin{aligned} (\mathbf{p} \star \mathbf{q})^{\ast} &amp; = (p_0q_0 -\vec{p} \cdot \vec{q} + p_0\vec{q} + q_0\vec{p} + \vec{p} \times \vec{q})^{\ast} \quad \text{(from Eq. (1))}\\ &amp; = (p_0q_0 -\vec{p} \cdot \vec{q} - p_0\vec{q} - q_0\vec{p} - \vec{p} \times \vec{q}) \quad \text{(from Eq. (2))}\\ &amp; = (p_0q_0 -(-\vec{p}) \cdot (-\vec{q}) + p_0(-\vec{q}) \\ &amp; \quad + q_0(-\vec{p}) - (-\vec{p}) \times (-\vec{q})) \quad \text{(Since } a \times b = (-a \times -b)\text{)}\\ &amp; = (p_0q_0 -(-\vec{p}) \cdot (-\vec{q}) + p_0(-\vec{q}) \\ &amp; \quad + q_0(-\vec{p}) + (-\vec{q}) \times (-\vec{p})) \quad \text{(Since } a \times b = - (b \times a)\text{)}\\ &amp; = \mathbf{q}^{\ast} \star \mathbf{p}^{\ast} \hspace{10cm} \text{(3)} \end{aligned}\] <p>With Eq. \(\text{(3)}\), we can now easily find the conjugate of quaternion multiplications of more than two quaternions and you see that the above form extends. Given four quaternions \(\mathbf{q}_1, \mathbf{q}_2, \mathbf{q}_3\) and \(\mathbf{q}_4\), we have</p> \[\begin{aligned} (\mathbf{q}_1 \star \mathbf{q}_2 \star \mathbf{q}_3)^{\ast} &amp;= ((\mathbf{q}_1 \star \mathbf{q}_2) \star \mathbf{q}_3)^{\ast}\\ &amp;= \mathbf{q}_3^{\ast} \star (\mathbf{q}_1 \star \mathbf{q}_2)^{\ast} \quad \text{(from Eq. (3))}\\ &amp;= \mathbf{q}_3^{\ast} \star \mathbf{q}_2^{\ast} \star \mathbf{q}_1^{\ast} \\ (\mathbf{q}_1 \star \mathbf{q}_2 \star \mathbf{q}_3 \star \mathbf{q}_4)^{\ast} &amp;= ((\mathbf{q}_1 \star \mathbf{q}_2) \star (\mathbf{q}_3 \star \mathbf{q}_4))^{\ast} \\ &amp;= (\mathbf{q}_3 \star \mathbf{q}_4)^{\ast} \star (\mathbf{q}_1 \star \mathbf{q}_2) ^{\ast} \\ &amp;= \mathbf{q}_4^{\ast} \star \mathbf{q}_3^{\ast} \star \mathbf{q}_2^{\ast} \star \mathbf{q}_1^{\ast} \\ \end{aligned}\] <h3 id="norm">Norm</h3> <p>The squared <em>norm</em> of a quaternion \(\mathbf{q}\) is simply its quadrance</p> \[\begin{aligned} \Vert \mathbf{q} \Vert^2 &amp;= q_0^2 + q_1^2 + q_2^2 + q_3^2 \\ &amp;= \mathbf{q^{\ast}} \star \mathbf{q} = \mathbf{q} \star \mathbf{q^{\ast}} \\ &amp;= q_0^2 + (\vec{q} \cdot \vec{q}) \end{aligned}\] <p>Deriving an equation for the squared <em>norm</em> of the quaternion product is easier with quadrance.</p> \[\begin{aligned} \Vert \mathbf{p} \star \mathbf{q} \Vert^2 &amp;= (\mathbf{p} \star \mathbf{q}) \star (\mathbf{p} \star \mathbf{q})^{\ast} \\ &amp;= \mathbf{p} \star \mathbf{q} \star \mathbf{q}^{\ast} \star \mathbf{p}^{\ast} \quad \text{(from Eq. (3))}\\ &amp;= \mathbf{p} \star \Vert \mathbf{q} \Vert^2 \star \mathbf{p}^{\ast} \\ &amp;= \Vert \mathbf{q} \Vert^2 \mathbf{p} \star \mathbf{p}^{\ast} \quad \text{(Scalars commute with quaternions)} \\ &amp;= \Vert \mathbf{q} \Vert^2 \Vert \mathbf{p} \Vert^2 \hspace{12cm} \text{(4)}\\ \end{aligned}\] <p>This relationship extends to higher-order quaternion multiplication as well. Given \(n\) quaternions \(\{\mathbf{q}_1, \mathbf{q}_2, ... \mathbf{q}_n\}\), one could easily derive the following</p> \[\begin{aligned} \Vert \mathbf{q}_1 \star \mathbf{q}_2 \star \mathbf{q}_3 \Vert^2 &amp;= \Vert \mathbf{q}_1 \Vert^2 \Vert \mathbf{q}_2 \Vert^2 \Vert \mathbf{q}_3 \Vert^2 \\ \Vert \mathbf{q}_1 \star \mathbf{q}_2 \star \mathbf{q}_3 \star \mathbf{q}_4 \Vert^2 &amp;= \Vert \mathbf{q}_1 \Vert^2 \Vert \mathbf{q}_2 \Vert^2 \Vert \mathbf{q}_3 \Vert^2 \Vert \mathbf{q}_4 \Vert^2 \\ \Vert \mathbf{q}_1 \star ... \star \mathbf{q}_n \Vert^2 &amp;= \Vert \mathbf{q}_1 \Vert^2 ... \Vert \mathbf{q}_n \Vert^2 \hspace{8.5cm} \text{(5)} \end{aligned}\] <h3 id="inverse">Inverse</h3> <p>The <em>inverse</em> of a quaternion \(\mathbf{q}\) is defined as</p> \[\mathbf{q}^{-1} = \frac{\mathbf{q^{\ast}}}{\mathbf{q^{\ast}} \star \mathbf{q}} \quad \Rightarrow \mathbf{q}^{-1} \star \mathbf{q} = 1\] <h2 id="conclusion">Conclusion</h2> <p>In this article, we’ve delved into the seemingly peculiar realm of quaternion algebra. We started by introducing quaternions as a four-dimensional extension of complex numbers, consisting of a real part and three imaginary components. We looked into some commonly used quaternion models, and then explored the <em>Scalar + Vector</em> model’s arithmetic operations and properties, including addition, scalar and quaternion multiplication, complex conjugate, norm and inverse and discussed the source of non-commutativity of their multiplication. In my next article <d-cite key="quat-rot-op1"></d-cite>, we’ll take this understanding a step further by exploring how quaternions can be <em>easily</em> extended to form a rotation operator in \(\mathbb{R}^3\).</p>]]></content><author><name>Akshay L Chandra</name></author><summary type="html"><![CDATA[A brief introduction to quaternions and their basic algebra]]></summary></entry><entry><title type="html">Learning Parameters Part 5: AdaGrad, RMSProp, and Adam</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-5-adagrad-rmsprop-and-adam/" rel="alternate" type="text/html" title="Learning Parameters Part 5: AdaGrad, RMSProp, and Adam"/><published>2019-09-27T04:38:57+00:00</published><updated>2019-09-27T04:38:57+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-5-adagrad-rmsprop-and-adam</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-5-adagrad-rmsprop-and-adam/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning Parameters Part 4: Tips For Adjusting Learning Rate, Line Search</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-4-tips-for-adjusting-learning-rate-line-search/" rel="alternate" type="text/html" title="Learning Parameters Part 4: Tips For Adjusting Learning Rate, Line Search"/><published>2019-09-27T03:37:12+00:00</published><updated>2019-09-27T03:37:12+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-4-tips-for-adjusting-learning-rate-line-search</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-4-tips-for-adjusting-learning-rate-line-search/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning Parameters, Part 3: Stochastic &amp;amp; Mini-Batch Gradient Descent</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-3-stochastic-mini-batch-gradient-descent/" rel="alternate" type="text/html" title="Learning Parameters, Part 3: Stochastic &amp;amp; Mini-Batch Gradient Descent"/><published>2019-05-16T12:50:50+00:00</published><updated>2019-05-16T12:50:50+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-3-stochastic--mini-batch-gradient-descent</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-3-stochastic-mini-batch-gradient-descent/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning Parameters, Part 2: Momentum-Based And Nesterov Accelerated Gradient Descent</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-2-momentum-based-and-nesterov-accelerated-gradient-descent/" rel="alternate" type="text/html" title="Learning Parameters, Part 2: Momentum-Based And Nesterov Accelerated Gradient Descent"/><published>2019-05-15T12:44:13+00:00</published><updated>2019-05-15T12:44:13+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-2-momentum-based-and-nesterov-accelerated-gradient-descent</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-2-momentum-based-and-nesterov-accelerated-gradient-descent/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning Parameters, Part 1: Gradient Descent</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-1-gradient-descent/" rel="alternate" type="text/html" title="Learning Parameters, Part 1: Gradient Descent"/><published>2019-05-14T21:20:57+00:00</published><updated>2019-05-14T21:20:57+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-1-gradient-descent</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-1-gradient-descent/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Learning Parameters, Part 0: Basic Stuff</title><link href="https://akshaychandra.com/blog/2019/learning-parameters-part-0-basic-stuff/" rel="alternate" type="text/html" title="Learning Parameters, Part 0: Basic Stuff"/><published>2019-05-14T21:20:41+00:00</published><updated>2019-05-14T21:20:41+00:00</updated><id>https://akshaychandra.com/blog/2019/learning-parameters-part-0-basic-stuff</id><content type="html" xml:base="https://akshaychandra.com/blog/2019/learning-parameters-part-0-basic-stuff/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Mouse Cursor Control Using Facial Movements — An HCI Application</title><link href="https://akshaychandra.com/blog/2018/mouse-cursor-control-using-facial-movementsan-hci-application/" rel="alternate" type="text/html" title="Mouse Cursor Control Using Facial Movements — An HCI Application"/><published>2018-10-07T20:36:17+00:00</published><updated>2018-10-07T20:36:17+00:00</updated><id>https://akshaychandra.com/blog/2018/mouse-cursor-control-using-facial-movementsan-hci-application</id><content type="html" xml:base="https://akshaychandra.com/blog/2018/mouse-cursor-control-using-facial-movementsan-hci-application/"><![CDATA[]]></content><author><name></name></author></entry></feed>